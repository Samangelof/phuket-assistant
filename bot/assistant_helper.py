import logging
import asyncio
import datetime
from typing import Dict, Tuple, Optional, Generator, Any
import httpx
import openai
from plugin_manager import PluginManager


class AssistantHelper:
    def __init__(self, config: dict, plugin_manager=PluginManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistant API.
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–ª—é—á–∞–º–∏ api_key, assistant_id –∏ —Ç.–¥.
            plugin_manager: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
        """
        http_client = httpx.AsyncClient(
            proxy=config['proxy']) if 'proxy' in config else None
        self.client = openai.AsyncOpenAI(
            api_key=config['api_key'], http_client=http_client)
        self.config = config
        self.plugin_manager = plugin_manager

        self.assistant_id = config['assistant_id']
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —á–∞—Ç–æ–≤ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.assistant_threads: Dict[int, str] = {}
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        self.last_updated: Dict[int, datetime.datetime] = {}

    async def get_chat_response(self, chat_id: int, query: str) -> Tuple[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[str, str]: (–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤)
        """
        try:
            current_date = datetime.datetime.now().strftime('%d-%m-%Y')
            query_with_date = f"–°–µ–≥–æ–¥–Ω—è {current_date}. {query}"
            logging.info(f'[get_chat_response] {query_with_date}')
            
            thread_id = await self._get_or_create_thread(chat_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=query_with_date
            )
            
            tools = []
            if self.plugin_manager:
                function_specs = self.plugin_manager.get_functions_specs()
                if function_specs:
                    tools = [{"type": "function", "function": spec} for spec in function_specs]
                    
            # –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            run = await self.client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=self.assistant_id,
                tools=tools
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            run_status = await self._wait_for_run_completion(thread_id, run.id)
            
            if run_status.status == "completed":
                messages = await self.client.beta.threads.messages.list(
                    thread_id=thread_id,
                    order="desc",
                    limit=1
                )
                
                if messages.data and messages.data[0].role == "assistant" and messages.data[0].content:
                    answer = messages.data[0].content[0].text.value
                    estimated_tokens = len(query) + len(answer) // 4
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    # if self.config.get('show_usage', False):
                    #     answer += f"\n\n---\nüí∞ {estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤"
                    
                    return answer, str(estimated_tokens)
                else:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", "0"
            else:
                return f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –°—Ç–∞—Ç—É—Å: {run_status.status}", "0"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")
            return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ‚ö†Ô∏è\n{str(e)}", "0"

    async def get_chat_response_stream(self, chat_id: int, query: str) -> Generator[Tuple[str, str], None, None]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤.
        """
        try:
            current_date = datetime.datetime.now().strftime('%d-%m-%Y')
            query_with_date = f"–°–µ–≥–æ–¥–Ω—è {current_date}. {query}"
            logging.info(f'[get_chat_response_stream] {query_with_date}')
            thread_id = await self._get_or_create_thread(chat_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=query_with_date
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç –ø–ª–∞–≥–∏–Ω–æ–≤
            tools = []
            if self.plugin_manager:
                function_specs = self.plugin_manager.get_functions_specs()
                if function_specs:
                    tools = [{"type": "function", "function": spec} for spec in function_specs]
            
            # –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            run = await self.client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=self.assistant_id,
                tools=tools
            )
            
            full_answer = ""
            is_complete = False
            
            while not is_complete:
                run_status = await self.client.beta.threads.runs.retrieve(
                    thread_id=thread_id,
                    run_id=run.id
                )

                logging.info(f"–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {run_status.status}")
                
                if run_status.status == "requires_action":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
                    tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
                    tool_outputs = []
                    
                    for tool_call in tool_calls:
                        function_name = tool_call.function.name
                        arguments = tool_call.function.arguments
                        
                        # –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
                        result = await self.plugin_manager.call_function(
                            function_name=function_name,
                            helper=self,
                            arguments=arguments
                        )
                        
                        tool_outputs.append({
                            "tool_call_id": tool_call.id,
                            "output": result
                        })
                    
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                    await self.client.beta.threads.runs.submit_tool_outputs(
                        thread_id=thread_id,
                        run_id=run.id,
                        tool_outputs=tool_outputs
                    )
                    
                    # –í—ã–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if not full_answer:
                        yield "–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...", "not_finished"
                
                elif run_status.status == "completed":
                    messages = await self.client.beta.threads.messages.list(
                        thread_id=thread_id,
                        order="desc",
                        limit=1
                    )
                    
                    if messages.data and messages.data[0].role == "assistant" and messages.data[0].content:
                        full_answer = messages.data[0].content[0].text.value
                        is_complete = True
                        estimated_tokens = len(query) + len(full_answer) // 4
                        
                        yield full_answer, str(estimated_tokens)
                    else:
                        yield "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", "0"
                        is_complete = True
                
                elif run_status.status in ["failed", "cancelled", "expired"]:
                    yield f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –°—Ç–∞—Ç—É—Å: {run_status.status}", "0"
                    is_complete = True
                
                else:
                    if not full_answer:
                        yield "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", "not_finished"
                    await asyncio.sleep(1)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}", exc_info=True)  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ traceback
            yield f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ‚ö†Ô∏è\n{str(e)}", "0"

    async def _get_or_create_thread(self, chat_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            
        Returns:
            str: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        if chat_id not in self.assistant_threads or self._max_age_reached(chat_id):
            thread = await self.client.beta.threads.create()
            self.assistant_threads[chat_id] = thread.id
            
        self.last_updated[chat_id] = datetime.datetime.now()
        return self.assistant_threads[chat_id]

    async def _wait_for_run_completion(self, thread_id: str, run_id: str, timeout: int = 120) -> Any:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            thread_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞
            run_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            
        Raises:
            TimeoutError: –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        """
        start_time = datetime.datetime.now()
        
        while True:
            run_status = await self.client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run_id
            )
            
            if run_status.status in ["completed", "failed", "cancelled", "expired"]:
                return run_status
                
            if (datetime.datetime.now() - start_time).seconds > timeout:
                await self.client.beta.threads.runs.cancel(
                    thread_id=thread_id,
                    run_id=run_id
                )
                raise TimeoutError(f"Run {run_id} timed out after {timeout} seconds")
                
            await asyncio.sleep(1)

    async def _wait_for_run_completion_with_tools(self, thread_id: str, run_id: str):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        while True:
            run_status = await self.client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run_id
            )
            
            if run_status.status == "requires_action":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
                tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
                tool_outputs = []
                
                for tool_call in tool_calls:
                    function_name = tool_call.function.name
                    arguments = tool_call.function.arguments
                    
                    # –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
                    result = await self.plugin_manager.call_function(
                        function_name=function_name,
                        helper=self,
                        arguments=arguments
                    )
                    
                    tool_outputs.append({
                        "tool_call_id": tool_call.id,
                        "output": result
                    })
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                await self.client.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread_id,
                    run_id=run_id,
                    tool_outputs=tool_outputs
                )
            
            elif run_status.status in ["completed", "failed", "cancelled", "expired"]:
                return run_status
            
            await asyncio.sleep(1)

    def reset_chat_history(self, chat_id: int) -> None:
        """
        –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        """
        if chat_id in self.assistant_threads:
            del self.assistant_threads[chat_id]
            if chat_id in self.last_updated:
                del self.last_updated[chat_id]

    def _max_age_reached(self, chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∞—Ç–∞.
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –∏–Ω–∞—á–µ False
        """
        if chat_id not in self.last_updated:
            return False
            
        last_updated = self.last_updated[chat_id]
        now = datetime.datetime.now()
        max_age_minutes = self.config.get('max_conversation_age_minutes', 60)
        
        return last_updated < now - datetime.timedelta(minutes=max_age_minutes)

    def get_conversation_stats(self, chat_id: int) -> Tuple[int, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
        
        Args:
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            
        Returns:
            Tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤)
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è Assistant API
        return 0, 0
        
    def get_prompt(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
        
        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–ø—Ç–µ
        """
        return "–ü—Ä–æ–º–ø—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Assistants API"
        
    def set_prompt(self, new_prompt: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            new_prompt: –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        """
        logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è Assistant API")